// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs
//= require_tree .

// basic info
var baseURL = window.location.protocol + '//' + window.location.host + '/';
var urlParams;
(window.onpopstate = function () {
    var match,
        pl     = /\+/g,  // Regex for replacing addition symbol with a space
        search = /([^&=]+)=?([^&]*)/g,
        decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
        query  = window.location.search.substring(1);

    urlParams = {};
    while (match = search.exec(query))
       urlParams[decode(match[1])] = decode(match[2]);
})();
var avatar_id = urlParams["avatar_id"];
if(!avatar_id) {
	avatar_id = 1;
}
var pathArray = window.location.pathname.split('/');
var sound_on = false;
if(urlParams["sound_on"] == "1") {
	sound_on = true;
}
var hide_input = false;
if(urlParams["hide_input"] == "1") {
	hide_input = true;
}
var server_time = null
var transmit_timeout = 9
var moderator_token = null

// flags and cashes for suggestion handling

var current_suggestions = null; //cache to store current suggestion data, set to null to reload
var animate_suggestions_update = true;
var top_suggestion_id = null;
var top_suggestion_score = null;
var transmit_suggestion = null; // cache to store current transmit suggestion

// ACTIVITY STARTS HERE

// pusher bindings
// console.log('<%= Pusher.key %>')
var pusher = new Pusher('<%= Pusher.key %>', { disableStats:true});
var channel = pusher.subscribe('chez_ois_chat');


// trap annoying alert when video stream is not available
//original_alert = alert;
//alert = function(text) {
//	if (text != "Could not find stream. The stream is not live.") {
//		original_alert(text)
//	}
//}

if(!(urlParams["hide_chat"] == "1")) {
  channel.bind('update_suggestions_' + avatar_id, function(data) {
  		//console.log("pusher update received: " + JSON.stringify(data));
  		//check if order changed
  		server_time = data.now;
  		if(suggestions_order_changed(data)) {
  			animate_suggestions_update = true;
  		}
  		current_suggestions = data;
  		render_suggestions(data, 'push');
  });
  /*channel.bind('read_suggestions', function(data) {
      //console.log(data)
   		read_with_queue(data.content);
  });*/
}
if(!(urlParams["hide_notice"] == "1")) {
  channel.bind('update_notice', function(data) {
      console.log(data)
  		$('#moderator-notice').html(data.content)
      $('#moderator-name').html(data.name)
      if(moderator_token) {
        $('.user_name_chat').html(data.name)
      }
      $('#moderator-notice').fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(300);
      $('#moderator_container').slideDown(100).delay(5000).slideUp(500);
  });
}
$(document).ready(function(){
	$('#moderator_container').click(function(elem){
		console.log(this, elem)
		$(this).fadeOut();
	})
})


channel.bind('update_blacklist', function(data) {
		render_blacklist(data);		
});
/*channel.bind('update_highscores', function(data) {
		render_highscores(data);
});
*/

// document loaded - setup up user events
$(document).ready(function() {

  transmit_timeout = $("meta[name='timeout']").attr("content")
  moderator_token = $("meta[name='moderator_token']").attr("content")

  local_upvote_button = $("meta[name='local_upvote_button']").attr("content")
  local_downvote_button = $("meta[name='local_downvote_button']").attr("content")
  local_upvote_count = $("meta[name='local_upvote_count']").attr("content")
  local_downvote_count = $("meta[name='local_downvote_count']").attr("content")
  suggestion_transmit_notice = $("meta[name='local_suggestion_transmit_notice']").attr("content")

	$('.entry_link').click(function(e) {
		if($('#display_user_name').html() == '') {
			$('#name_message').html('Gib erst einen Namen ein!');
			e.preventDefault();
		}
	});

	$('#chat_name').keydown(function(e) {
		if($(this).val().length >= 10) {
			$('#name_message').html('Bitte maximal 10 Zeichen!');
		} else {
			$('#name_message').html('');
		}
	});

	$('#suggestion_input').keydown(function(e) {
		if($(this).val().length >= 79) {
			$('#suggestion_message').html('Bitte maximal 80 Zeichen!');
		} else {
			$('#suggestion_message').html('');
		}
	});

	$('#notice_input_form').submit(function(e) {
		e.preventDefault();
		//if($('#notice_input').val().length > 0) {
			submitNotice($('#notice_name').val(), $('#notice_content').val())
    //}
    $('#notice_content').val('');
	});

	$('#suggestion_input_form').submit(function(e) {
			e.preventDefault();
			if($('#suggestion_input').val().length > 0) {
				submitSuggestion($('#suggestion_input').val(), $('#chat_name').val());
			}
      $('#suggestion_input').val('');
	});

	$('#name_input_form').submit(function(e) {
			e.preventDefault();
			if($('#new_chat_name').val().length > 0) {
				submitName($('#new_chat_name').val());
        $('#suggestion_input_form').show();
      }
	});
  
  $('#new_name_button').click(function(e) {
    $('#name_container').slideDown();    
    $('#suggestion_input_form').hide();
  });

  // get things going
	updateSuggestions();	
  // updateHighscores();
	if($('.blacklist')) {
		updateBlacklist();
	}

	setInterval(updateTimers, 1000);

});


// MANAGE SUGGESTIONS

// step 0 - get suggestion list from server
function updateSuggestions() {
		$.getJSON(baseURL + 'suggestions/list?avatar_id=' + avatar_id, function(data) {
			server_time = data.now;
			current_suggestions = data;
			//console.log('update suggestion cache');
			render_suggestions(data, 'poll');
		});
}

// render the suggestions list from the data
function render_suggestions(data, update_type) {
		//render_new_suggestions(data.suggestions_new, data.user_votes_new, $('#suggestions_new'), 'new', update_type);
    //console.log("render with type " + update_type)
    if(update_type != 'timer') {
      render_transmit_suggestion(data.suggestion_transmit);
    }
    render_top_suggestions(data.suggestions_top, data.user_votes_top, $('#suggestions_top'), 'top', update_type);

		updateAjaxLinks();
}

// render rest of the suggestions with voting buttons relative to specific user identified via cookie
function render_top_suggestions(suggestions, user_votes, div, suggestion_type, update_type) {
	
	if(suggestions.length == 0 && pathArray[1] != 'displays') {
		div.html('');
		return;
	}
	  
	var list = '<ul>';
	var myIndex = 0;
	
	$.each(suggestions, function(index, suggestion) {
		user_vote = user_voted_on(user_votes[suggestion.id], $.cookie('user_hash'));
		var item = '';

		var date = new Date();
		var seconds = server_time;
		var time_dif = seconds - suggestion.vote_time; // how old is the suggestion in seconds
		var time_left = 59 - time_dif;
		var minutes_left = Math.floor(time_left / 60);
		var seconds_left = time_left % 60;
		
    // retire old suggestions
		if(time_dif > 59) {
			//retireSuggestion(suggestion.id);
			time_left = 0;
			minutes_left = 0;
			seconds_left = 0;
			return true;
		}
        
		item += '<span class="suggestion_content">' + '<span class="suggestion_name">' + suggestion.name + '</span>'

    if(suggestion.name2 == "boost") {
      item += " (Ãœberholspur!)"
    } else if (suggestion.name2 == "solo") {
      item += " (solo)"
    }

    item += ' "' + suggestion.content + '"</span><br>'
    
  	time_string = minutes_left + ':' + pad(seconds_left);
  	if(minutes_left == 0 && seconds_left <= 5) {
  		time_string = '<span class="warning">' + time_string + '</span>';
  	}
		
    if(suggestion.score < 0) {
      item += '<span class="suggestion_details warning">'+local_downvote_count+': ' + -suggestion.score + '&nbsp;<span class="small_countdown">(' + time_string + ')</span></span>&nbsp;';            
    } else if(suggestion.score == 0) {
      item += '<span class="suggestion_details"><span class="small_countdown">(' + time_string + ')</span></span>&nbsp;';            
    } else if(suggestion.score > 0) {
      item += '<span class="suggestion_details">'+local_upvote_count+': ' + suggestion.score + '&nbsp;<span class="small_countdown">(' + time_string + ')</span>&nbsp;';      
    }
		
    // moderator options			
    if(moderator_token) {
      item += render_moderator_buttons(suggestion) + "&nbsp;"
		}
		    
    if(!hide_input) {
				
				pro_text = local_upvote_button;
				contra_text = local_downvote_button;
	
				if(user_vote) {
					// user has already voted on this suggestion
					if(user_vote.vote == 1) {
						// user voted up, can now only vote down
						item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=down&avatar_id=' + avatar_id + '" class="ajax" value="'+contra_text+'" />';
					} else if(user_vote.vote == 0) {
						// user is neutral, can vote both ways
						item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=up&avatar_id=' + avatar_id + '" class="ajax" value="'+pro_text+'" />&nbsp;';
						item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=down&avatar_id=' + avatar_id + '" class="ajax" value="'+contra_text+'" />';		
					} else if(user_vote.vote == -1) {
						// user voted down, can now only vote up
						item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=up&avatar_id=' + avatar_id + '" class="ajax" value="'+pro_text+'" />&nbsp;';
					}
				} else {
					// first vote on this suggestion - user can vote both ways
					item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=up&avatar_id=' + avatar_id + '" class="ajax" value="'+pro_text+'" />&nbsp;';
					item += '<input type="button" class="ajax voting" href="suggestions/' + suggestion.id + '/vote?direction=down&avatar_id=' + avatar_id + '" class="ajax" value="'+contra_text+'" />';
				}	
    }			
	
		list += '<li>' + item + '</li>';
		myIndex++;
	});

	list += '</ul>';

	if(animate_suggestions_update) {
		div.fadeOut("fast", function() {
			div.html(list);
			div.slideDown("fast", updateAjaxLinks);
			animate_suggestions_update = false;
		});
	}	else {
		div.html(list);
	}
}

// render the suggestion in transmission
function render_transmit_suggestion(suggestion_transmit_data) {
  if(suggestion_transmit_data) {
	  var item = '<span class="suggestion_content">' + '<span class="suggestion_name">' + suggestion_transmit_data.name + '</span>'
    if(suggestion_transmit_data.name2 == "boost") {
      item += " (Ãœberholspur)"
    } else if (suggestion_transmit_data.name2 == "solo") {
      item += " (solo)"
    }
    item += ' "' + suggestion_transmit_data.content + '"</span></span><br>'
    item += '<span class="suggestion_details">'+suggestion_transmit_notice+'</span>';
    
    // moderator options			
    if(moderator_token) {
      item += render_moderator_buttons(suggestion_transmit_data)
		}

    $('#suggestion_transmit').html(item)
    transmit_suggestion = suggestion_transmit_data
    //console.log('set transmit_suggestion to' + transmit_suggestion.content)
  } else {
    $('#suggestion_transmit').html('')
    transmit_suggestion = null
    //console.log('set transmit_suggestion to null')
  }
}

// add moderation buttons
function render_moderator_buttons(suggestion) {
  item = '&nbsp;<input type="button" class="ajax" href="suggestions/' + suggestion.id + '/decline?avatar_id=' + avatar_id + '" class="ajax" value="decline" />';
  item += '&nbsp;<input type="button"/ value="block" class="ajax" href="admin/block?ip=' + suggestion.ip + '&name=' + suggestion.name + '&suggestion_id=' + suggestion.id + '&avatar_id=' + avatar_id + '">';
  //item += '&nbsp;<input type="button"/ value="boost" class="ajax" href="admin/boost?ip=' + suggestion.ip + '&name=' + suggestion.name + '&suggestion_id=' + suggestion.id + '&avatar_id=' + avatar_id + '">'; 
  item += '&nbsp;<input type="button"/ value="solo" class="ajax" href="admin/solo?ip=' + suggestion.ip + '&name=' + suggestion.name + '&suggestion_id=' + suggestion.id + '&avatar_id=' + avatar_id + '">'; 
  return item
}

// update the timers
function updateTimers() {
	server_time = server_time + 1;

	if(!current_suggestions) { // check if suggestions are not already in cache
		updateSuggestions();

	} else { // suggestions are there
    /*if(transmit_suggestion) { // there's a suggestion in transmission
      //console.log(server_time - transmit_suggestion.vote_time)
      if(!transmit_timeout) {
        transmit_timeout = 10
      }
      if(server_time - transmit_suggestion.vote_time > transmit_timeout) { // check if is still has time
        console.log("retiring")
        console.log(transmit_suggestion)
        retireSuggestion(transmit_suggestion.id)
        transmit_suggestion = null
      }
    }*/
    //render_transmit_suggestion(transmit_suggestion)
    render_suggestions(current_suggestions, 'timer');
	}
}

// step 1 - user submits a new suggestion
function submitSuggestion(content, name) {
	//current_suggestions = null;
	$.ajax({
		type: "POST",
	  url: baseURL + "suggestions/submit",
   	data: "content=" + content + "&name=" + name + "&avatar_id=" + avatar_id,
   	success: function(msg){
   		//console.log(msg);
			if(msg.status == 'blacklisted') {
   			$('#suggestion_message').html('Sorry, you were blocked.');
   		} else if(msg.status == 'boost') {
   			$('#suggestion_message').html('You are solo!');
   		} else if(msg.status == 'solo') {
   		  $('#suggestion_message').html('Psst! Only ' + msg.name + ' is allowed to speak now.');
   		} else if(msg.status == 'full') {
   			$('#suggestion_message').html('Too many submissions. Please wait.');
   		}
   	},
   	error: function(XMLHttpRequest, textStatus, errorThrown) {
   		console.log(errorThrown);
   	}
 	});
}

// step 2 - set suggestion to trasnmission mode
/*function transmitSuggestion(suggestion_id) {
	$.ajax({
		type: "POST",
	  url: baseURL + "suggestions/" + suggestion_id + "/accept",	  
   	data: "avatar_id=" + avatar_id,
   	success: function(msg){
   		//console.log('accepted: ' + msg);
   	},
   	error: function(XMLHttpRequest, textStatus, errorThrown) {
   		console.log(errorThrown);
   	}
 	});
}*/

// step 3 - retire a suggestion when it's time has run out
/*function retireSuggestion(suggestion_id) {
	//current_suggestions = null;
	$.ajax({
		type: "POST",
	  url: baseURL + "suggestions/" + suggestion_id + "/retire",	  
   	data: "avatar_id=" + avatar_id,
   	success: function(msg){
   		//console.log('retired: ' + msg);
   	},
   	error: function(XMLHttpRequest, textStatus, errorThrown) {
   		console.log(errorThrown);
   	}
 	});	
}*/

// VOTING

// check if the order of top suggestions changed
function suggestions_order_changed(data) {
	if(!current_suggestions) {
		return true;
	}
	if(!current_suggestions.suggestions_top || !data.suggestions_top) {
		return true;
	}
	if(current_suggestions.suggestions_top.length != data.suggestions_top.length) {
		return true;
	}
	for(i = 0; i < data.suggestions_top.length; i++) {
		if(data.suggestions_top[i].id != current_suggestions.suggestions_top[i].id) {
			return true;
		}
	}
	return false;
}

// check if user voted on something
function user_voted_on(user_votes, user_hash) {
	if(!user_votes) {
		return null;
	}
	var r = null;
	$.each(user_votes, function(index, user_vote) {
		if(user_vote.user == user_hash) {
			r = user_vote;
		}
	});
	return r;
}


// OTHER USER OPERATIONS

// user changed their name
function submitName(name) {
	$.ajax({
		type: "POST",
	  url: baseURL + "suggestions/update_user_name",
   	data: "name=" + name,
   	success: function(msg){
			$('#chat_name').val(name); 
      $('#display_user_name').html(name); 
			$('#name_container').slideUp();
   		console.log(msg);
   	},
   	error: function(XMLHttpRequest, textStatus, errorThrown) {
   		console.log(errorThrown);
   	}
 	});
}

// moderator submits notice
function submitNotice(name, content) {
	//current_suggestions = null;
	$.ajax({
		type: "POST",
	  url: baseURL + "notice/submit",
   	data: "content=" + content + "&name=" + name,
   	error: function(XMLHttpRequest, textStatus, errorThrown) {
   		console.log(errorThrown);
   	}
 	});
}


/*
// HIGHSCORES

function render_highscores(data) {

  // suggestion_highscores
	var list = '<ul>';
	$.each(data.suggestion_highscores, function(index, entry) {			
		list += '<li>';
		list += (index + 1) + '. "' + entry.content + '" <span class="highscore_details">' + entry.name + ', Pros: ' + entry.score + '</span>';
		list += '</li>';
	});		
	list += '</ul>';
	$('#suggestion_highscores').html(list);

	var list = '<ul>';
	$.each(data.user_highscores, function(index, entry) {
		list += '<li>';
		list += (index + 1) + '. ' + entry.user_name + ' <span class="highscore_details">Pros: ' + entry.score + '</span>';
		list += '</li>';
	});		
	list += '</ul>';
	$('#user_highscores').html(list);

}

function updateHighscores() {
	$.getJSON(baseURL + 'suggestions/highscores', render_highscores);
}
*/

// BLACKLIST

function render_blacklist(data) {
	var list = '<ul>';
	$.each(data.blacklist, function(index, entry) {
		list += '<li>';
		list += entry.ip_address + ' (' + entry.user_name + ') status: '
    
    switch(entry.status) {
      case 0: list += "blocked"; break;
      case 2: list += "Ãœberholspur"; break;  
      case 3: list += "solo"; break;  
      default:
        list += entry.status  
    }
		list += '&nbsp;<a href="admin/reset?ip=' + entry.ip_address + '&name=' + entry.user_name + '" class="ajax">reset</a>';
		list += '</li>';
	});		
	list += '</ul>';
	$('.blacklist').html(list);
	updateAjaxLinks();
}

function updateBlacklist() {
	$.getJSON(baseURL + 'admin/blacklist', render_blacklist);
}


// HELPERS

// resets links in suggestionlist after reload
function updateAjaxLinks() {
	$('.ajax').unbind('click');
	$('.ajax').click(function(event) {
		//current_suggestions = null; 
		event.preventDefault();

		if($(this).hasClass('voting')) {
      //$(this).attr('disabled', 'disabled')
      //$(this).parent().fadeOut()
    }

		if($(this).hasClass('confirm')) {
			if(!confirm('Really?')) {
				return false;
			}
		}

		$.ajax({
			type: "POST",
		  url: baseURL + $(this).attr("href"),
  	 	success: function(msg) {
   			//console.log(msg);
	   	},
  	 	error: function(XMLHttpRequest, textStatus, errorThrown) {
   			console.log(errorThrown);
	   	}
	 	});
	});
}

// number format for countdown
function pad(num) {
	if(num < 10) return "0" + num;
  return num;
}

